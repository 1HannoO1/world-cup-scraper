# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d0HcXSg2RO_18qX7YUysegl3qofz3r1u
"""

import pandas as pd
from bs4 import BeautifulSoup
import requests
import re
from datetime import datetime

def scrape_world_cup_matches(year):
    url = f'https://en.wikipedia.org/wiki/{year}_FIFA_World_Cup'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    matches = []
    current_stage = "Group stage"

    # Special handling for 1990 group stage matches
    if year == 1990:
        group_tables = soup.find_all('table', style=re.compile('width:100%'))

        for table in group_tables:
            prev = table.find_previous(['h2', 'h3', 'h4'])
            if prev and 'group' in prev.get_text().lower():
                group_name = prev.get_text().strip()
                current_date = None

                for row in table.find_all('tr'):
                    if len(row.find_all('td')) == 1:
                        date_cell = row.find('td')
                        if date_cell:
                            current_date = date_cell.get_text(strip=True)

                    cells = row.find_all('td')
                    if len(cells) >= 3 and current_date:
                        try:
                            home_team = cells[0].get_text(strip=True)
                            score = cells[1].get_text(strip=True)
                            away_info = cells[2].get_text('\n', strip=True).split('\n')
                            away_team = away_info[0]

                            venue_city = away_info[-1].split(',') if len(away_info) > 1 else ["Unknown", "Unknown"]
                            venue = venue_city[0].strip() if len(venue_city) > 0 else "Unknown"
                            city = venue_city[1].strip() if len(venue_city) > 1 else "Unknown"

                            score_parts = re.findall(r'\d+', score)
                            home_score = int(score_parts[0]) if score_parts else 0
                            away_score = int(score_parts[1]) if len(score_parts) > 1 else 0

                            # Goal scorers not available in these tables
                            home_scorers = []
                            away_scorers = []

                            matches.append({
                                'year': year,
                                'date': current_date,
                                'stage': group_name,
                                'team1': home_team,
                                'score1': home_score,
                                'team2': away_team,
                                'score2': away_score,
                                'venue': venue,
                                'city': city,
                                'referee': 'Unknown',
                                'round': 'Group stage',
                                'goal_scorers_team1': '; '.join(home_scorers) if home_scorers else 'None',
                                'goal_scorers_team2': '; '.join(away_scorers) if away_scorers else 'None'
                            })
                        except Exception as e:
                            print(f"Error processing 1990 group match: {e}")

    # Process all footballbox matches
    footballboxes = soup.find_all('div', class_='footballbox')

    for box in footballboxes:
        try:
            # Determine stage
            prev = box.find_previous(['h2', 'h3', 'h4'])
            if prev:
                header_text = prev.get_text().lower()
                if year == 1990:
                    if 'round of 16' in header_text or 'second round' in header_text:
                        current_stage = "Round of 16"
                    elif 'quarter' in header_text:
                        current_stage = "Quarter-finals"
                    elif 'semi' in header_text:
                        current_stage = "Semi-finals"
                    elif 'third' in header_text or 'play-off' in header_text:
                        current_stage = "Third place play-off"
                    elif 'final' in header_text:
                        current_stage = "Final"
                else:
                    if 'group' in header_text:
                        current_stage = "Group stage"
                    elif 'round of 16' in header_text:
                        current_stage = "Round of 16"
                    elif 'quarter' in header_text:
                        current_stage = "Quarter-finals"
                    elif 'semi' in header_text:
                        current_stage = "Semi-finals"
                    elif 'third' in header_text or 'play-off' in header_text:
                        current_stage = "Third place play-off"
                    elif 'final' in header_text:
                        current_stage = "Final"

            # Extract match details
            home_team = box.find('th', class_='fhome').get_text(strip=True)
            score_text = box.find('th', class_='fscore').get_text(strip=True)
            away_team = box.find('th', class_='faway').get_text(strip=True)

            score_parts = re.findall(r'\d+', score_text)
            home_score = int(score_parts[0]) if score_parts else 0
            away_score = int(score_parts[1]) if len(score_parts) > 1 else 0

            # Date
            date_div = box.find('div', class_='fdate')
            date = date_div.get_text(strip=True) if date_div else "Unknown"

            # Venue and city
            venue = "Unknown"
            city = "Unknown"
            location = box.find('div', itemprop='location')
            if location:
                links = location.find_all('a')
                if links:
                    venue = links[0].get_text(strip=True)
                    if len(links) > 1:
                        city = links[1].get_text(strip=True)

            # Referee
            referee = "Unknown"
            fright = box.find('div', class_='fright')
            if fright:
                ref_div = fright.find_all('div')[-1]
                ref_text = ref_div.get_text(strip=True)
                if 'Referee:' in ref_text:
                    ref_link = ref_div.find('a')
                    referee = ref_link.get_text(strip=True) if ref_link else ref_text.replace('Referee:', '').strip()

            # Goal scorers
            home_scorers = []
            away_scorers = []

            # Regular goals
            for goal in box.find_all('span', class_='fb-goal'):
                scorer = goal.find_previous('a')
                if scorer:
                    minute = goal.get_text(strip=True)
                    parent = goal.find_parent('td')
                    if parent and 'fhgoal' in parent.get('class', []):
                        home_scorers.append(f"{scorer.get_text(strip=True)} {minute}")
                    elif parent and 'fagoal' in parent.get('class', []):
                        away_scorers.append(f"{scorer.get_text(strip=True)} {minute}")

            # Penalty shootout
            pen_header = box.find('th', string=lambda t: t and 'penalties' in t.lower())
            if pen_header:
                for row in pen_header.find_next_siblings('tr'):
                    for scorer in row.find_all('a'):
                        pen = scorer.find_next('span', typeof='mw:File')
                        if pen:
                            result = "scored" if "check" in pen.img['src'] else "missed"
                            parent = scorer.find_parent('td')
                            if parent and 'fhgoal' in parent.get('class', []):
                                home_scorers.append(f"{scorer.get_text(strip=True)} (pen {result})")
                            elif parent and 'fagoal' in parent.get('class', []):
                                away_scorers.append(f"{scorer.get_text(strip=True)} (pen {result})")

            matches.append({
                'year': year,
                'date': date,
                'stage': current_stage,
                'team1': home_team,
                'score1': home_score,
                'team2': away_team,
                'score2': away_score,
                'venue': venue,
                'city': city,
                'referee': referee,
                'round': current_stage,
                'goal_scorers_team1': '; '.join(home_scorers) if home_scorers else 'None',
                'goal_scorers_team2': '; '.join(away_scorers) if away_scorers else 'None'
            })

        except Exception as e:
            print(f"Error processing footballbox match: {e}")

    return pd.DataFrame(matches)

# List of World Cup years
years = [1930, 1934, 1938, 1950, 1954, 1958, 1962, 1966, 1970, 1974,
         1978, 1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014,
         2018, 2022]
# Scrape all tournaments
all_matches = []
for year in years:
    print(f"Scraping {year} World Cup...")
    try:
        df = scrape_world_cup_matches(year)
        print(f"Found {len(df)} matches")
        all_matches.append(df)
    except Exception as e:
        print(f"Error scraping {year}: {e}")

# Combine all DataFrames
if all_matches:
    df_fifa = pd.concat(all_matches, ignore_index=True)

    # Clean date column
    df_fifa['date'] = pd.to_datetime(df_fifa['date'], errors='coerce')

    # Save to CSV
    df_fifa.to_csv('world_cup_matches_with_scorers.csv', index=False)
    print("Data saved to world_cup_matches_with_scorers.csv")

    # Display sample
    print(df_fifa.head())
else:
    print("No data was collected")

# 1. Clean team names
def clean_team_name(name):
    name = re.sub(r'\[.*?\]', '', str(name))  # Remove citations
    name = re.sub(r'\xa0|\u200e|\u202a|\u202c', ' ', name)  # Remove special spaces
    name = re.sub(r'\([^)]*\)', '', name)  # Remove parentheses content
    name = re.sub(r'\s+', ' ', name).strip()  # Normalize whitespace
    return name if name else "Unknown"

# 2. Extract and clean scores
def clean_score(score):
    nums = re.findall(r'\d+', str(score))
    return int(nums[0]) if nums else 0

# 3. Clean dates
def clean_date(date_str):
    date_str = re.sub(r'\[.*?\]', '', str(date_str))  # Remove citations
    # Match formats: "15 June 2002", "June 15, 2002", "15-Jun-2002"
    match = re.search(r'(\d{1,2})\s*[- ]\s*([A-Za-z]+)\s*[- ]\s*(\d{4})', date_str) or \
            re.search(r'([A-Za-z]+)\s+(\d{1,2}),?\s+(\d{4})', date_str)
    if match:
        try:
            day, month, year = match.groups()
            return datetime.strptime(f"{day} {month} {year}", "%d %B %Y")
        except:
            return None
    return None

# 4. Clean referee names
def clean_referee(ref):
    ref = re.sub(r'Referee:\s*', '', str(ref), flags=re.IGNORECASE)
    ref = re.sub(r'\(.*?\)|\d+', '', ref)  # Remove country and numbers
    return re.sub(r'\s+', ' ', ref).strip() or "Unknown"

# Clean all text columns
text_cols = ['team1', 'team2', 'venue', 'city', 'referee', 'stage', 'round']
for col in text_cols:
    if col in df_fifa.columns:
        df_fifa[col] = df_fifa[col].apply(clean_team_name)

# Clean scores
df_fifa['score1'] = df_fifa['score1'].apply(clean_score)
df_fifa['score2'] = df_fifa['score2'].apply(clean_score)

# Clean dates
df_fifa['date'] = df_fifa['date'].apply(clean_date)

# Clean referees
df_fifa['referee'] = df_fifa['referee'].apply(clean_referee)

# Clean goal scorers
for col in ['goal_scorers_team1', 'goal_scorers_team2']:
    df_fifa[col] = df_fifa[col].apply(lambda x: re.sub(r'\[.*?\]', '', str(x)))

# Check for missing values
df_fifa.drop(['date'], axis = 1, inplace = True)
print("Missing values per column:")
print(df_fifa.isnull().sum())

# Check cleaned data sample
print("\nSample cleaned data:")
display(df_fifa.head(3))

from pymongo import MongoClient
import json

# Replace with your actual connection string
client = MongoClient("mongodb+srv://MuhannadMustafa:mmmuhannaddd@cluster0.9n4ckv1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0&tls=true")

# Create or connect to database
db = client["fifa_world_cup"]

# Create or connect to collection
collection = db["matches"]

# Convert dataframe to JSON-like dicts
data_dict = df_fifa.fillna("None").to_dict("records")

# Insert into MongoDB
collection.insert_many(data_dict)

print("✅ Data inserted into MongoDB!")

# 1. Find all matches played in a specific city (e.g., Doha)
matches_in_doha = list(collection.find({ "city": "Doha" }))

# 2. Find all finals
finals = list(collection.find({ "stage": "Final" }))

# 3. Find all matches where Brazil played
brazil_matches = list(collection.find({
    "$or": [
        { "team1": "Brazil" },
        { "team2": "Brazil" }
    ]
}))

# 4. Find matches in a specific year (e.g., 2022)
matches_2022 = list(collection.find({ "year": 2022 }))

# 5. Find matches with more than 5 total goals
high_scoring_matches = list(collection.find({
    "$expr": {
        "$gt": [{ "$add": ["$score1", "$score2"] }, 5]
    }
}))

# 6. Count total matches per year
matches_per_year = list(collection.aggregate([
    { "$group": { "_id": "$year", "count": { "$sum": 1 } } },
    { "$sort": { "_id": 1 } }
]))

# 7. List all distinct teams (from team1 only)
distinct_teams = collection.distinct("team1")

print("Matches in Doha:", matches_in_doha[:1])
print("Finals:", finals[:1])
print("Brazil matches:", brazil_matches[:1])
print("Matches in 2022:", matches_2022[:1])
print("High scoring matches:", high_scoring_matches[:1])
print("Matches per year:", matches_per_year)
print("Distinct teams:", distinct_teams)

from google.colab import drive
drive.mount('/content/drive')
df_fifa.to_csv("/content/drive/MyDrive/Fifa_World_Cup_Matches_Complete_1930_2022.csv", index=False)
from google.colab import files
files.download("/content/drive/MyDrive/Fifa_World_Cup_Matches_Complete_1930_2022.csv")
print("Data successfully Downloaded to Fifa_World_Cup_Matches_Complete_1930_2022.csv")

def clean_team_name(team):
    """Clean team names by removing flags and special characters"""
    team = re.sub(r'\[.*?\]', '', team)  # Remove anything in brackets
    team = re.sub(r'\xa0', ' ', team)    # Remove non-breaking spaces
    team = team.strip()
    return team

def clean_referee_name(ref):
    """Clean referee names by removing country info"""
    ref = re.sub(r'\(.*?\)', '', ref)  # Remove anything in parentheses
    ref = ref.strip()
    return ref

df_fifa.shape

df_fifa.head()

print(df_fifa.info())
print(df_fifa.iloc[630])

df_fifa.head()

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Set style for plots
plt.style.use('ggplot')
sns.set_palette("husl")

## Matches per World Cup Edition
plt.figure(figsize=(12, 6))
matches_per_year = df_fifa['year'].value_counts().sort_index()
matches_per_year.plot(kind='bar', color='skyblue')
plt.title('Number of Matches per World Cup Edition', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Number of Matches', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True, axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

## Goals Distribution by Stage
plt.figure(figsize=(12, 6))
df_fifa['total_goals'] = df_fifa['score1'] + df_fifa['score2']
sns.boxplot(x='round', y='total_goals', data=df_fifa, order=['Group stage', 'Round of 16', 'Quarter-finals', 'Semi-finals', 'Third place play-off', 'Final'])
plt.title('Goals Distribution by Tournament Stage', fontsize=14)
plt.xlabel('Stage', fontsize=12)
plt.ylabel('Total Goals per Match', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

## Average Goals per World Cup
plt.figure(figsize=(12, 6))
avg_goals_per_year = df_fifa.groupby('year')['total_goals'].mean()
avg_goals_per_year.plot(kind='line', marker='o', color='green', linewidth=2)
plt.title('Average Goals per Match by World Cup Edition', fontsize=14)
plt.xlabel('Year', fontsize=12)
plt.ylabel('Average Goals per Match', fontsize=12)
plt.xticks(df['year'].unique(), rotation=45)
plt.grid(True, linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Most Common Match Results (considering mirrored scores as same)
plt.figure(figsize=(12, 6))

# Create normalized scores where we sort the scores to treat 1-0 and 0-1 as the same
df_fifa['normalized_score1'] = df_fifa[['score1', 'score2']].min(axis=1)
df_fifa['normalized_score2'] = df_fifa[['score1', 'score2']].max(axis=1)

# Group by normalized scores and count occurrences
result_counts = df_fifa.groupby(['normalized_score1', 'normalized_score2']).size().reset_index(name='count')

# Create a readable result string
result_counts['result'] = result_counts['normalized_score1'].astype(str) + '-' + result_counts['normalized_score2'].astype(str)

# Get top 10 results
top_results = result_counts.sort_values('count', ascending=False).head(10)

# Create the plot
sns.barplot(x='count', y='result', data=top_results, palette='viridis')
plt.title('Top 10 Most Common Match Results in World Cup History\n(Mirrored scores combined)', fontsize=14)
plt.xlabel('Number of Occurrences', fontsize=12)
plt.ylabel('Scoreline', fontsize=12)

# Add count labels to each bar
for i, count in enumerate(top_results['count']):
    plt.text(count + 0.5, i, str(count), va='center', fontsize=10)

plt.tight_layout()
plt.show()

## Host Countries Visualization (based on most common cities)
plt.figure(figsize=(12, 6))
top_cities = df_fifa['city'].value_counts()
top_cities = top_cities[top_cities.index != "Unknown"].head(15)  # Filter out "Unknown"
top_cities.plot(kind='barh', color='orange')
plt.title('Top 15 Cities Hosting World Cup Matches', fontsize=14)
plt.xlabel('Number of Matches Hosted', fontsize=12)
plt.ylabel('City', fontsize=12)
plt.tight_layout()
plt.show()

## Referee Appearances
plt.figure(figsize=(12, 6))
top_referees = df_fifa['referee'].value_counts()
top_referees = top_referees[top_referees.index != "Unknown"].head(15)  # Filter out "Unknown"
top_referees.plot(kind='barh', color='purple')
plt.title('Top 15 Referees by Number of Matches Officiated', fontsize=14)
plt.xlabel('Number of Matches', fontsize=12)
plt.ylabel('Referee', fontsize=12)
plt.tight_layout()
plt.show()

# Extract host countries (most common city's country - approximation)
# Note: For more accuracy, you'd need to add actual host country data to your dataset
host_countries = {
    1930: 'Uruguay', 1934: 'Italy', 1938: 'France', 1950: 'Brazil',
    1954: 'Switzerland', 1958: 'Sweden', 1962: 'Chile', 1966: 'England',
    1970: 'Mexico', 1974: 'West Germany', 1978: 'Argentina', 1982: 'Spain',
    1986: 'Mexico', 1990: 'Italy', 1994: 'United States', 1998: 'France',
    2002: 'South Korea/Japan', 2006: 'Germany', 2010: 'South Africa',
    2014: 'Brazil', 2018: 'Russia', 2022: 'Qatar'
}

# Create host country performance analysis
host_performance = []
for year, country in host_countries.items():
    host_matches = df_fifa[df_fifa['year'] == year]
    host_wins = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] > host_matches['score2']) |
                             (host_matches['team2'] == country) & (host_matches['score2'] > host_matches['score1'])])
    host_draws = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] == host_matches['score2']) |
                              (host_matches['team2'] == country) & (host_matches['score2'] == host_matches['score1'])])
    host_losses = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] < host_matches['score2']) |
                               (host_matches['team2'] == country) & (host_matches['score2'] < host_matches['score1'])])

    # Get final position (simplified - champion, runner-up, or eliminated)
    final_match = host_matches[host_matches['round'] == 'Final']
    if len(final_match) > 0:
        if country in [final_match.iloc[0]['team1'], final_match.iloc[0]['team2']]:
            position = 'Champion' if ((final_match.iloc[0]['team1'] == country and final_match.iloc[0]['score1'] > final_match.iloc[0]['score2']) or
                                   (final_match.iloc[0]['team2'] == country and final_match.iloc[0]['score2'] > final_match.iloc[0]['score1'])) else 'Runner-up'
        else:
            position = 'Eliminated earlier'
    else:
        position = 'Eliminated earlier'

    host_performance.append({
        'Year': year,
        'Host Country': country,
        'Wins': host_wins,
        'Draws': host_draws,
        'Losses': host_losses,
        'Win Rate': host_wins / (host_wins + host_draws + host_losses) if (host_wins + host_draws + host_losses) > 0 else 0,
        'Final Position': position
    })

host_df = pd.DataFrame(host_performance)

# Visualization
plt.figure(figsize=(14, 8))
sns.barplot(x='Win Rate', y='Host Country', data=host_df.sort_values('Win Rate', ascending=False),
            hue='Final Position', dodge=False, palette={'Champion':'gold', 'Runner-up':'silver', 'Eliminated earlier':'lightgray'})
plt.title('Host Country Performance in World Cup History', fontsize=16)
plt.xlabel('Win Rate', fontsize=12)
plt.ylabel('Host Country', fontsize=12)
plt.xlim(0, 1)
plt.legend(title='Final Position', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Calculate total goals scored by each team
team1_goals = df_fifa.groupby('team1')['score1'].sum()
team2_goals = df_fifa.groupby('team2')['score2'].sum()
total_goals = team1_goals.add(team2_goals, fill_value=0).sort_values(ascending=False).head(15)

# Calculate average goals per match
team1_matches = df_fifa['team1'].value_counts()
team2_matches = df_fifa['team2'].value_counts()
total_matches = team1_matches.add(team2_matches, fill_value=0)
avg_goals = (team1_goals + team2_goals) / total_matches

# Create combined dataframe
top_scorers = pd.DataFrame({
    'Total Goals': total_goals,
    'Average Goals per Match': avg_goals[total_goals.index]
}).sort_values('Total Goals', ascending=False).head(15)

# Visualization
plt.figure(figsize=(14, 8))
sns.barplot(x='Total Goals', y=top_scorers.index, data=top_scorers, color='royalblue', label='Total Goals')
sns.scatterplot(x='Average Goals per Match', y=top_scorers.index, data=top_scorers,
                color='red', s=200, marker='o', label='Average per Match')

plt.title('Top 15 Highest Scoring Teams in World Cup History', fontsize=16)
plt.xlabel('Goals', fontsize=12)
plt.ylabel('Team', fontsize=12)
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True, axis='x', linestyle='--', alpha=0.7)

# Add value labels
for i, value in enumerate(top_scorers['Total Goals']):
    plt.text(value + 2, i, f"{value} ({top_scorers['Average Goals per Match'].iloc[i]:.2f})", va='center')

plt.tight_layout()
plt.show()

pip freeze > requirements.txt

# Commented out IPython magic to ensure Python compatibility.
import os
from getpass import getpass

# Save requirements.txt to local Colab filesystem
with open('requirements.txt', 'w') as f:
    f.write("beautifulsoup4\nrequests\npandas\nlxml\n")

# GitHub credentials
username = '1HannoO1'
repo = 'world-cup-scraper'
token = getpass('Enter your GitHub token: ')

# Upload using GitHub API
!git config --global user.email "you@example.com"
!git config --global user.name "Your Name"

!git clone https://{username}:{token}@github.com/{username}/{repo}.git
!cp requirements.txt {repo}/
# %cd {repo}
!git add requirements.txt
!git commit -m "Add requirements.txt"
!git push origin main