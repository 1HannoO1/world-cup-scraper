# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xaAvZ5NwCIcOVuq4xHS8YP74w5mmr1QI
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pymongo import MongoClient

st.set_page_config(layout="wide")
st.title("‚öΩ FIFA World Cup Matches Dashboard (1930 - 2022)")

# MongoDB connection
@st.cache_resource
def load_data():
    client = MongoClient("mongodb+srv://MuhannadMustafa:mmmuhannaddd@cluster0.9n4ckv1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0&tls=true")
    db = client["fifa_world_cup"]
    collection = db["matches"]
    data = list(collection.find())
    df = pd.DataFrame(data)

    # Ensure required columns exist
    expected_cols = ['year', 'date', 'team1', 'score1', 'team2', 'score2', 'stage', 'city']
    for col in expected_cols:
        if col not in df.columns:
            df[col] = None

    # Drop exact duplicates (row-wise duplicates, not logical)
    df.drop_duplicates(inplace=True)

    # Clean and fill missing values
    df.fillna("None", inplace=True)

    # Ensure scores are numeric (in case they came in as strings)
    df['score1'] = pd.to_numeric(df['score1'], errors='coerce').fillna(0).astype(int)
    df['score2'] = pd.to_numeric(df['score2'], errors='coerce').fillna(0).astype(int)

    # Calculate total goals
    df['total_goals'] = df['score1'] + df['score2']

    return df


df = load_data()
df.fillna("None", inplace=True)
df['total_goals'] = df['score1'] + df['score2']

# Sidebar filters
st.sidebar.header("üîç Filter Matches")
years = sorted(df['year'].unique())
selected_years = st.sidebar.multiselect("Select Years", years, default=[2022])

stages = sorted(df['stage'].unique())
selected_stages = st.sidebar.multiselect("Select Stages", stages, default=["Final", "Semi-finals"])

teams = sorted(set(df['team1'].unique()) | set(df['team2'].unique()))
selected_team = st.sidebar.selectbox("Filter by Team", ["All"] + teams)

cities = sorted(df['city'].unique())
selected_city = st.sidebar.selectbox("Filter by City", ["All"] + cities)

# Filter DataFrame
filtered_df = df[
    df['year'].isin(selected_years) & 
    df['stage'].isin(selected_stages)
]

if selected_team != "All":
    filtered_df = filtered_df[
        (filtered_df['team1'] == selected_team) | 
        (filtered_df['team2'] == selected_team)
    ]

if selected_city != "All":
    filtered_df = filtered_df[filtered_df['city'] == selected_city]

# Display filtered data with all columns except MongoDB _id
st.subheader("üìã Filtered Matches")
st.dataframe(
    filtered_df[['year', 'date', 'team1', 'score1', 'team2', 'score2', 'stage', 'city']],
    height=300
)

# Plot 1: Matches per year
st.subheader("üìä Number of Matches per World Cup Edition")
match_counts = df['year'].value_counts().sort_index()
fig1 = px.bar(x=match_counts.index, y=match_counts.values,
              labels={'x': 'Year', 'y': 'Number of Matches'},
              title="Matches per Year",
              color=match_counts.values, color_continuous_scale='Blues')
st.plotly_chart(fig1, use_container_width=True)

# Plot 2: Goals by stage (Boxplot)
st.subheader("‚öΩ Goal Distribution by Stage")
order = ['Group stage', 'Round of 16', 'Quarter-finals', 'Semi-finals', 'Third place play-off', 'Final']
goals_df = df[df['stage'].isin(order)]
fig2 = px.box(goals_df, x='stage', y='total_goals', category_orders={'stage': order},
              title="Goals by Stage", color='stage')
fig2.update_traces(marker_color='orange')
st.plotly_chart(fig2, use_container_width=True)

# Plot 3: Avg goals per year
st.subheader("üìà Average Goals per Match by Edition")
avg_goals = df.groupby('year')['total_goals'].mean().reset_index()
fig3 = px.line(avg_goals, x='year', y='total_goals', markers=True,
               labels={'total_goals': 'Avg Goals'},
               title="Average Goals per Match (by Year)")
fig3.update_traces(line=dict(color='green', width=3))
st.plotly_chart(fig3, use_container_width=True)

# Plot 4: Most common results (Mirrored)
st.subheader("üèÜ Top 10 Most Common Match Results")
df['norm_score1'] = df[['score1', 'score2']].min(axis=1)
df['norm_score2'] = df[['score1', 'score2']].max(axis=1)
result_counts = df.groupby(['norm_score1', 'norm_score2']).size().reset_index(name='count')
result_counts['result'] = result_counts['norm_score1'].astype(str) + '-' + result_counts['norm_score2'].astype(str)
top_results = result_counts.sort_values('count', ascending=False).head(10)

fig4 = px.bar(top_results, x='count', y='result', orientation='h',
              labels={'count': 'Match Count', 'result': 'Scoreline'},
              title="Top 10 Most Common Match Results", color='count', color_continuous_scale='viridis')
fig4.update_layout(yaxis={'categoryorder': 'total ascending'})
st.plotly_chart(fig4, use_container_width=True)

# Download full CSV
st.sidebar.markdown("### üì• Download")
csv = df.to_csv(index=False).encode('utf-8')
st.sidebar.download_button("Download Full Dataset", data=csv, file_name="Fifa_World_Cup_Matches_1930_2022.csv", mime='text/csv')