# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eKR3LQn2iakqXuauz7DXvM6npY2L4bD1
"""

import streamlit as st
import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
from pymongo import MongoClient
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

st.set_page_config(layout="wide")
st.title("FIFA World Cup Matches Scraper and Analyzer")

import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
from datetime import datetime
import time

# Configure Streamlit
st.set_page_config(layout="wide", page_title="World Cup Scraper")
st.title("FIFA World Cup Matches Scraper")

# Initialize session state
if 'df_fifa' not in st.session_state:
    st.session_state.df_fifa = pd.DataFrame()

# Optimized scraping function
@st.cache_data(ttl=3600, show_spinner="Scraping data...")
def scrape_world_cup_matches(year):
    try:
        url = f'https://en.wikipedia.org/wiki/{year}_FIFA_World_Cup'
        headers = {'User-Agent': 'Mozilla/5.0'}

        # Use session with retries
        session = requests.Session()
        retry = requests.adapters.HTTPAdapter(max_retries=3)
        session.mount('https://', retry)

        response = session.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        # Simplified scraping logic - adapt with your actual parsing code
        matches = []
        for match in soup.select('.footballbox'):
            home = match.select_one('.fhome').get_text(strip=True)
            away = match.select_one('.faway').get_text(strip=True)
            score = match.select_one('.fscore').get_text(strip=True)

            matches.append({
                'year': year,
                'home': home,
                'away': away,
                'score': score,
                'date': datetime.now().strftime('%Y-%m-%d')  # placeholder
            })

        return pd.DataFrame(matches)

    except Exception as e:
        st.error(f"Error scraping {year}: {str(e)}")
        return pd.DataFrame()

# Streamlit UI
years = st.multiselect(
    "Select World Cup Years",
    options=list(range(1930, 2023, 4)),
    default=[2018, 2022]
)

if st.button("Scrape Data"):
    if not years:
        st.warning("Please select at least one year")
    else:
        with st.spinner(f"Scraping {len(years)} World Cups..."):
            progress_bar = st.progress(0)
            all_data = []

            for i, year in enumerate(years):
                df = scrape_world_cup_matches(year)
                if not df.empty:
                    all_data.append(df)
                progress_bar.progress((i + 1) / len(years))
                time.sleep(2)  # Be polite to Wikipedia's servers

            if all_data:
                st.session_state.df_fifa = pd.concat(all_data, ignore_index=True)
                st.success(f"Successfully scraped {len(st.session_state.df_fifa)} matches!")
            else:
                st.error("No data was scraped")

# Display results
if not st.session_state.df_fifa.empty:
    st.subheader("Scraped Data Preview")
    st.dataframe(st.session_state.df_fifa.head())

    st.download_button(
        label="Download as CSV",
        data=st.session_state.df_fifa.to_csv(index=False),
        file_name=f"world_cup_matches_{datetime.now().strftime('%Y%m%d')}.csv",
        mime='text/csv'
    )

if st.button("Scrape World Cup Data"):
    years = [1930, 1934, 1938, 1950, 1954, 1958, 1962, 1966, 1970, 1974,
             1978, 1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014,
             2018, 2022]

    all_matches = []
    progress_bar = st.progress(0)
    status_text = st.empty()

    for i, year in enumerate(years):
        status_text.text(f"Scraping {year} World Cup... ({i+1}/{len(years)})")
        try:
            df = scrape_world_cup_matches(year)
            st.info(f"Found {len(df)} matches for {year}")
            all_matches.append(df)
        except Exception as e:
            st.error(f"Error scraping {year}: {e}")
        progress_bar.progress((i + 1) / len(years))

    if all_matches:
        df_fifa = pd.concat(all_matches, ignore_index=True)

        # Clean date column
        df_fifa['date'] = pd.to_datetime(df_fifa['date'], errors='coerce')

        # Data cleaning functions
        def clean_team_name(name):
            name = re.sub(r'\$.*?\$', '', str(name))  # Remove citations
            name = re.sub(r'\xa0|\u200e|\u202a|\u202c', ' ', name)  # Remove special spaces
            name = re.sub(r'$\[^)]*\$', '', name)  # Remove parentheses content
            name = re.sub(r'\s+', ' ', name).strip()  # Normalize whitespace
            return name if name else "Unknown"

        def clean_score(score):
            nums = re.findall(r'\d+', str(score))
            return int(nums[0]) if nums else 0

        def clean_date(date_str):
            date_str = re.sub(r'\$.\*?\$', '', str(date_str))  # Remove citations
            match = re.search(r'(\d{1,2})\s\*\[- ]\s\*(\[A-Za-z]+)\s\*\[- ]\s\*(\d{4})', date_str) or \
                   re.search(r'(\[A-Za-z]+)\s+(\d{1,2}),?\s+(\d{4})', date_str)
            if match:
                try:
                    day, month, year = match.groups()
                    return datetime.strptime(f"{day} {month} {year}", "%d %B %Y")
                except:
                    return None
            return None

        def clean_referee(ref):
            ref = re.sub(r'Referee:\s\*', '', str(ref), flags=re.IGNORECASE)
            ref = re.sub(r'\$.\*?\$|\d+', '', ref)  # Remove country and numbers
            return re.sub(r'\s+', ' ', ref).strip() or "Unknown"

        # Clean all text columns
        text_cols = ['team1', 'team2', 'venue', 'city', 'referee', 'stage', 'round']
        for col in text_cols:
            if col in df_fifa.columns:
                df_fifa[col] = df_fifa[col].apply(clean_team_name)

        # Clean scores
        df_fifa['score1'] = df_fifa['score1'].apply(clean_score)
        df_fifa['score2'] = df_fifa['score2'].apply(clean_score)

        # Clean dates
        df_fifa['date'] = df_fifa['date'].apply(clean_date)

        # Clean referees
        df_fifa['referee'] = df_fifa['referee'].apply(clean_referee)

        # Clean goal scorers
        for col in ['goal_scorers_team1', 'goal_scorers_team2']:
            df_fifa[col] = df_fifa[col].apply(lambda x: re.sub(r'\$.\*?\$', '', str(x)))

        # Check for missing values
        df_fifa.drop(['date'], axis=1, inplace=True)

        st.success("Data collection and cleaning complete!")
        st.session_state.df_fifa = df_fifa

        # Show sample data
        st.subheader("Sample Data")
        st.write(df_fifa.head())

if 'df_fifa' in st.session_state and st.button("Store in MongoDB"):
    st.write("Connecting to MongoDB...")

    try:
        # Replace with your actual connection string
        client = MongoClient("mongodb+srv://MuhannadMustafa:mmmuhannaddd@cluster0.9n4ckv1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0&tls=true")

        # Create or connect to database
        db = client["fifa_world_cup"]

        # Create or connect to collection
        collection = db["matches"]

        # Convert dataframe to JSON-like dicts
        data_dict = st.session_state.df_fifa.fillna("None").to_dict("records")

        # Insert into MongoDB
        collection.insert_many(data_dict)

        st.success("âœ… Data inserted into MongoDB!")
    except Exception as e:
        st.error(f"Error connecting to MongoDB: {e}")

if 'df_fifa' in st.session_state:
    st.header("Data Analysis")

    df_fifa = st.session_state.df_fifa

    # Add total goals column for analysis
    df_fifa['total_goals'] = df_fifa['score1'] + df_fifa['score2']

    # Analysis options
    analysis_option = st.selectbox(
        "Select Analysis",
        ["Matches per World Cup", "Goals by Stage", "Average Goals Over Time",
         "Common Match Results", "Top Host Cities", "Top Referees",
         "Host Performance", "Top Scoring Teams"]
    )

    if analysis_option == "Matches per World Cup":
        st.subheader("Number of Matches per World Cup Edition")
        fig, ax = plt.subplots(figsize=(12, 6))
        matches_per_year = df_fifa['year'].value_counts().sort_index()
        matches_per_year.plot(kind='bar', color='skyblue', ax=ax)
        ax.set_title('Number of Matches per World Cup Edition', fontsize=14)
        ax.set_xlabel('Year', fontsize=12)
        ax.set_ylabel('Number of Matches', fontsize=12)
        plt.xticks(rotation=45)
        plt.grid(True, axis='y', linestyle='--', alpha=0.7)
        st.pyplot(fig)

    elif analysis_option == "Goals by Stage":
        st.subheader("Goals Distribution by Tournament Stage")
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.boxplot(x='round', y='total_goals', data=df_fifa,
                    order=['Group stage', 'Round of 16', 'Quarter-finals',
                           'Semi-finals', 'Third place play-off', 'Final'], ax=ax)
        ax.set_title('Goals Distribution by Tournament Stage', fontsize=14)
        ax.set_xlabel('Stage', fontsize=12)
        ax.set_ylabel('Total Goals per Match', fontsize=12)
        plt.xticks(rotation=45)
        st.pyplot(fig)

    elif analysis_option == "Average Goals Over Time":
        st.subheader("Average Goals per Match by World Cup Edition")
        fig, ax = plt.subplots(figsize=(12, 6))
        avg_goals_per_year = df_fifa.groupby('year')['total_goals'].mean()
        avg_goals_per_year.plot(kind='line', marker='o', color='green', linewidth=2, ax=ax)
        ax.set_title('Average Goals per Match by World Cup Edition', fontsize=14)
        ax.set_xlabel('Year', fontsize=12)
        ax.set_ylabel('Average Goals per Match', fontsize=12)
        plt.xticks(df_fifa['year'].unique(), rotation=45)
        plt.grid(True, linestyle='--', alpha=0.7)
        st.pyplot(fig)

    elif analysis_option == "Common Match Results":
        st.subheader("Top 10 Most Common Match Results")
        df_fifa['normalized_score1'] = df_fifa[['score1', 'score2']].min(axis=1)
        df_fifa['normalized_score2'] = df_fifa[['score1', 'score2']].max(axis=1)
        result_counts = df_fifa.groupby(['normalized_score1', 'normalized_score2']).size().reset_index(name='count')
        result_counts['result'] = result_counts['normalized_score1'].astype(str) + '-' + result_counts['normalized_score2'].astype(str)
        top_results = result_counts.sort_values('count', ascending=False).head(10)

        fig, ax = plt.subplots(figsize=(12, 6))
        sns.barplot(x='count', y='result', data=top_results, palette='viridis', ax=ax)
        ax.set_title('Top 10 Most Common Match Results in World Cup History\n(Mirrored scores combined)', fontsize=14)
        ax.set_xlabel('Number of Occurrences', fontsize=12)
        ax.set_ylabel('Scoreline', fontsize=12)
        for i, count in enumerate(top_results['count']):
            ax.text(count + 0.5, i, str(count), va='center', fontsize=10)
        st.pyplot(fig)

    elif analysis_option == "Top Host Cities":
        st.subheader("Top 15 Cities Hosting World Cup Matches")
        fig, ax = plt.subplots(figsize=(12, 6))
        top_cities = df_fifa['city'].value_counts()
        top_cities = top_cities[top_cities.index != "Unknown"].head(15)
        top_cities.plot(kind='barh', color='orange', ax=ax)
        ax.set_title('Top 15 Cities Hosting World Cup Matches', fontsize=14)
        ax.set_xlabel('Number of Matches Hosted', fontsize=12)
        ax.set_ylabel('City', fontsize=12)
        st.pyplot(fig)

    elif analysis_option == "Top Referees":
        st.subheader("Top 15 Referees by Number of Matches Officiated")
        fig, ax = plt.subplots(figsize=(12, 6))
        top_referees = df_fifa['referee'].value_counts()
        top_referees = top_referees[top_referees.index != "Unknown"].head(15)
        top_referees.plot(kind='barh', color='purple', ax=ax)
        ax.set_title('Top 15 Referees by Number of Matches Officiated', fontsize=14)
        ax.set_xlabel('Number of Matches', fontsize=12)
        ax.set_ylabel('Referee', fontsize=12)
        st.pyplot(fig)

    elif analysis_option == "Host Performance":
        st.subheader("Host Country Performance in World Cup History")
        host_countries = {
            1930: 'Uruguay', 1934: 'Italy', 1938: 'France', 1950: 'Brazil',
            1954: 'Switzerland', 1958: 'Sweden', 1962: 'Chile', 1966: 'England',
            1970: 'Mexico', 1974: 'West Germany', 1978: 'Argentina', 1982: 'Spain',
            1986: 'Mexico', 1990: 'Italy', 1994: 'United States', 1998: 'France',
            2002: 'South Korea/Japan', 2006: 'Germany', 2010: 'South Africa',
            2014: 'Brazil', 2018: 'Russia', 2022: 'Qatar'
        }

        host_performance = []
        for year, country in host_countries.items():
            host_matches = df_fifa[df_fifa['year'] == year]
            host_wins = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] > host_matches['score2']) |
                                       (host_matches['team2'] == country) & (host_matches['score2'] > host_matches['score1'])])
            host_draws = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] == host_matches['score2']) |
                                         (host_matches['team2'] == country) & (host_matches['score2'] == host_matches['score1'])])
            host_losses = len(host_matches[(host_matches['team1'] == country) & (host_matches['score1'] < host_matches['score2']) |
                                          (host_matches['team2'] == country) & (host_matches['score2'] < host_matches['score1'])])

            final_match = host_matches[host_matches['round'] == 'Final']
            if len(final_match) > 0:
                if country in [final_match.iloc[0]['team1'], final_match.iloc[0]['team2']]:
                    position = 'Champion' if ((final_match.iloc[0]['team1'] == country and final_match.iloc[0]['score1'] > final_match.iloc[0]['score2']) or
                                           (final_match.iloc[0]['team2'] == country and final_match.iloc[0]['score2'] > final_match.iloc[0]['score1'])) else 'Runner-up'
                else:
                    position = 'Eliminated earlier'
            else:
                position = 'Eliminated earlier'

            host_performance.append({
                'Year': year,
                'Host Country': country,
                'Wins': host_wins,
                'Draws': host_draws,
                'Losses': host_losses,
                'Win Rate': host_wins / (host_wins + host_draws + host_losses) if (host_wins + host_draws + host_losses) > 0 else 0,
                'Final Position': position
            })

        host_df = pd.DataFrame(host_performance)

        fig, ax = plt.subplots(figsize=(14, 8))
        sns.barplot(x='Win Rate', y='Host Country', data=host_df.sort_values('Win Rate', ascending=False),
                    hue='Final Position', dodge=False, palette={'Champion':'gold', 'Runner-up':'silver', 'Eliminated earlier':'lightgray'}, ax=ax)
        ax.set_title('Host Country Performance in World Cup History', fontsize=16)
        ax.set_xlabel('Win Rate', fontsize=12)
        ax.set_ylabel('Host Country', fontsize=12)
        ax.set_xlim(0, 1)
        ax.legend(title='Final Position', bbox_to_anchor=(1.05, 1), loc='upper left')
        st.pyplot(fig)

    elif analysis_option == "Top Scoring Teams":
        st.subheader("Top 15 Highest Scoring Teams in World Cup History")
        team1_goals = df_fifa.groupby('team1')['score1'].sum()
        team2_goals = df_fifa.groupby('team2')['score2'].sum()
        total_goals = team1_goals.add(team2_goals, fill_value=0).sort_values(ascending=False).head(15)

        team1_matches = df_fifa['team1'].value_counts()
        team2_matches = df_fifa['team2'].value_counts()
        total_matches = team1_matches.add(team2_matches, fill_value=0)
        avg_goals = (team1_goals + team2_goals) / total_matches

        top_scorers = pd.DataFrame({
            'Total Goals': total_goals,
            'Average Goals per Match': avg_goals[total_goals.index]
        }).sort_values('Total Goals', ascending=False).head(15)

        fig, ax = plt.subplots(figsize=(14, 8))
        sns.barplot(x='Total Goals', y=top_scorers.index, data=top_scorers, color='royalblue', label='Total Goals', ax=ax)
        sns.scatterplot(x='Average Goals per Match', y=top_scorers.index, data=top_scorers,
                        color='red', s=200, marker='o', label='Average per Match', ax=ax)

        ax.set_title('Top 15 Highest Scoring Teams in World Cup History', fontsize=16)
        ax.set_xlabel('Goals', fontsize=12)
        ax.set_ylabel('Team', fontsize=12)
        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax.grid(True, axis='x', linestyle='--', alpha=0.7)

        for i, value in enumerate(top_scorers['Total Goals']):
            ax.text(value + 2, i, f"{value} ({top_scorers['Average Goals per Match'].iloc[i]:.2f})", va='center')

        st.pyplot(fig)