# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vOD9IPjPogX4Re1orGB6TqsnG702CqPE
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pymongo import MongoClient
import re

st.set_page_config(layout="wide")
st.title("FIFA World Cup Matches Dashboard (1930 - 2022)")

# MongoDB connection
@st.cache_resource
def load_data():
    client = MongoClient("mongodb+srv://MuhannadMustafa:mmmuhannaddd@cluster0.9n4ckv1.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0&tls=true")
    db = client["fifa_world_cup"]
    collection = db["matches"]
    data = list(collection.find())
    df = pd.DataFrame(data)
    return df

df = load_data()

# Clean missing
df.fillna("None", inplace=True)

# Sidebar filters
st.sidebar.header("üîç Filter Matches")
years = sorted(df['year'].unique())
selected_years = st.sidebar.multiselect("Select Years", years, default=[2022])

stages = sorted(df['stage'].unique())
selected_stages = st.sidebar.multiselect("Select Stages", stages, default=["Final", "Semi-finals"])

teams = sorted(set(df['team1'].unique()) | set(df['team2'].unique()))
selected_team = st.sidebar.selectbox("Filter by Team", ["All"] + teams)

cities = sorted(df['city'].unique())
selected_city = st.sidebar.selectbox("Filter by City", ["All"] + cities)

# Filter DataFrame
filtered_df = df[df['year'].isin(selected_years) & df['stage'].isin(selected_stages)]

if selected_team != "All":
    filtered_df = filtered_df[(filtered_df['team1'] == selected_team) | (filtered_df['team2'] == selected_team)]

if selected_city != "All":
    filtered_df = filtered_df[df['city'] == selected_city]

# Display results
st.subheader("üìã Filtered Matches")
st.dataframe(filtered_df[['year', 'date', 'team1', 'score1', 'team2', 'score2', 'stage', 'city']], height=300)

# Plot 1: Matches per year
st.subheader("üìä Number of Matches per World Cup Edition")
match_counts = df['year'].value_counts().sort_index()
fig1, ax1 = plt.subplots(figsize=(12, 4))
match_counts.plot(kind='bar', ax=ax1, color='skyblue')
ax1.set_title("Matches per Year")
ax1.set_xlabel("Year")
ax1.set_ylabel("Number of Matches")
st.pyplot(fig1)

# Plot 2: Goals per stage
df['total_goals'] = df['score1'] + df['score2']
st.subheader("‚öΩ Goal Distribution by Stage")
fig2, ax2 = plt.subplots(figsize=(12, 4))
order = ['Group stage', 'Round of 16', 'Quarter-finals', 'Semi-finals', 'Third place play-off', 'Final']
sns.boxplot(x='stage', y='total_goals', data=df[df['stage'].isin(order)], order=order, ax=ax2)
ax2.set_title("Goals by Stage")
ax2.set_xlabel("Stage")
ax2.set_ylabel("Total Goals")
st.pyplot(fig2)

# Plot 3: Average goals per year
st.subheader("üìà Average Goals per Match by Edition")
avg_goals = df.groupby('year')['total_goals'].mean()
fig3, ax3 = plt.subplots(figsize=(12, 4))
avg_goals.plot(kind='line', marker='o', color='green', ax=ax3)
ax3.set_title("Average Goals per Year")
ax3.set_xlabel("Year")
ax3.set_ylabel("Avg Goals")
st.pyplot(fig3)

# Plot 4: Top 10 most common results
st.subheader("üèÜ Top 10 Most Common Match Results")
df['norm_score1'] = df[['score1', 'score2']].min(axis=1)
df['norm_score2'] = df[['score1', 'score2']].max(axis=1)
result_counts = df.groupby(['norm_score1', 'norm_score2']).size().reset_index(name='count')
result_counts['result'] = result_counts['norm_score1'].astype(str) + '-' + result_counts['norm_score2'].astype(str)
top_results = result_counts.sort_values('count', ascending=False).head(10)

fig4, ax4 = plt.subplots(figsize=(10, 5))
sns.barplot(x='count', y='result', data=top_results, ax=ax4, palette='viridis')
ax4.set_title("Top 10 Common Scorelines (Mirrored Combined)")
for i, count in enumerate(top_results['count']):
    ax4.text(count + 0.5, i, str(count), va='center')
st.pyplot(fig4)

# Download
st.sidebar.markdown("### üì• Download")
csv = df.to_csv(index=False).encode('utf-8')
st.sidebar.download_button("Download Full Dataset", data=csv, file_name="Fifa_World_Cup_Matches_1930_2022.csv", mime='text/csv')